Path 1:
  { PRE: m >= 0 & n >= 0 }
  ; Substitute
      @m1 -> 0
      @n1 -> 0
      @res -> 0
  { POST: INVARIANT == PLACEHOLDER }
Path 2:
  { PRE: INVARIANT == PLACEHOLDER }
  ; Assume m1 < m
  ; Substitute
      @n1 -> 0
  { POST: n1 <= n & (res == (m1 * n) + n1 & (m1 < m & (0 <= n1 & (0 <= m1 & 0 <= res)))) }
Path 3:
  { PRE: n1 <= n & (res == (m1 * n) + n1 & (m1 < m & (0 <= n1 & (0 <= m1 & 0 <= res)))) }
  ; Assume n1 < n
  ; Substitute
      @res -> res + 1
      @n1 -> n1 + 1
  { POST: n1 <= n & (res == (m1 * n) + n1 & (m1 < m & (0 <= n1 & (0 <= m1 & 0 <= res)))) }
Path 4:
  { PRE: n1 <= n & (res == (m1 * n) + n1 & (m1 < m & (0 <= n1 & (0 <= m1 & 0 <= res)))) }
  ; Assume ~ n1 < n
  ; Substitute
      @m1 -> m1 + 1
  { POST: INVARIANT == PLACEHOLDER }
Path 5:
  { PRE: INVARIANT == PLACEHOLDER }
  ; Assume ~ m1 < m
  { POST: res == m * n }